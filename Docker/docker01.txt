Docker : 컨테이너 기반 오픈소스 가상화 플랫폼
컨테이너 
- 격리된 공간에서 프로세스가 동작하는 기술.
- 추가적인 OS를 설치하여 가상화하는 방법은 성능문제가 있기에 프로세스를 격리시키는 방식 등장.
- 이 방식을 리눅스에서 리눅스 컨테이너라고 칭하며 CPU나 메모리는 필요한 만큼 사용하며 성능적으로 손실이 거의 없다.
- Docker의 기본 네트워크 모드는 Briedge이며 네트워크 성능이 중요한 프로그램의 경우 --net=host 옵션 고려
- 하나의 서버에 여러개의 컨테이너를 실행하면 영향을 미치지 않고 독립적으로 실행된다.
- 실행중인 컨테이너에 명령어를 입력할 수 있다.
- apt-get이나 yum으로 패키지를 설치할 수 있으며 사용자도 추가하고 여러개의 프로세스를 백그라운드로 실행할 수 있다.

이미지
- 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것.
- 상태값을 가지지 않고 변하지 않는 것이 특징.
- 컨테이너는 이미지를 실행한 상태라고 볼 수 있으며 추가되거나 변하는 값은 컨테이너에 저장된다.
- 같은 이미지에서 여러개의 컨테이너를 생성할 수 있다.
- 컨테이너의 상태에 무관하게 이미지는 변하지 않는다.
- 컨테이너를 실행하기 위한 모든~정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없다.
- 이미지는 url방식으로 관리하며 태그를 붙일 수 있다.

레이어 저장방식
- 이미지는 여러개의 읽기 전용 레이어로 구성되며 파일이 추가되거나 수정되면 새로운 레이어가 생성된다.
- ex) 
ubuntu 이미지 : A + B + C 
ubuntu 베이스로 만든 nginx 이미지 : A + B + C + ngnix /
nginx 이미지를 기반으로 만든 webapp 이미지 : A + B + C + nginx + source

컨테이너를 생성할 때에도 레이어 방식 사용
- 기존의 이미지 레이어 위에 읽기/쓰기(read-write) 레이어 추가
- 컨테이너 실행중에 생성하는 파일이나 변경된 내용은 읽기/쓰기 레이어에 저장되므로 여러개의 컨테이너를 생성해도 최소한의 용량 사용

Dockerfile
- 도커는 이미지를 만들기 위해 Dockerfile이라는 파일에 자체 DSL(Domain-specific language)언어를 이용하여 이미지 생성 과정을 적는다.

DockerHub
- 큰 용량의 이미지를 서버에 저장하고 관리하는 것 대신 공개 이미지를 무료로 관리해 준다.

Command와 API
- Docker client의 커멘드 명령어는 직관적이고 사용하기 용이하다.
- REST Api를 지원하여 확장성이 좋다.


