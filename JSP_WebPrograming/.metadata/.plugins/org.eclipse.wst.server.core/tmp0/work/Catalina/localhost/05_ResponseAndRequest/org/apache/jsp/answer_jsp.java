/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.55
 * Generated at: 2020-05-25 09:09:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class answer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<!-- # Request \r\n");
      out.write("웹 브라우저의 요청 정보를 제공하는 객체이다.\r\n");
      out.write("웹 브라우저, 즉 클라이언트가 전송한 정보와 서버 정보를 제공해준다.\r\n");
      out.write("-->\r\n");

	/* 요청 파라미터의 인코딩과 디코딩
	파라미터를 서로 주고받을 때 인코딩할 때 사용한 캐릭터 셋과 디코딩할 때 사용하는 캐릭터 셋이 같아야 한다.
	특히 파라미터를 데이터셋 형태의 post로 받게 된다면 그에 맞게 디코딩하여 사용해야 한다.
	*/
	request.setCharacterEncoding("UTF-8");
	String pet_val = request.getParameter("q_pet");
	String pet_info = "";
	if(pet_val.equals("dog")){
		pet_info = "강아지를 선택하셨습니다";
	}
	if(pet_val.equals("cat")){
		pet_info = "고양이를 선택하셨습니다";
	}
	if(pet_val.equals("fish")){
		pet_info = "물고기를 선택하셨습니다";
	}

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t\t<title>Request 기본 객체와 파라미터 처리</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<script></script>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<!-- Request 객체의 클라이언트, 서버 관련 메서드 -->\r\n");
      out.write("\t\t<h1>Request 기본 객체의 클라이언트 및 서버 정보 관련 메서드</h1>\r\n");
      out.write("\t\t1) 클라이언트 IP : ");
      out.print( request.getRemoteAddr() );
      out.write("<br>\r\n");
      out.write("\t\t2) 요청정보 길이 : ");
      out.print( request.getContentLength() );
      out.write("<br>\r\n");
      out.write("\t\t3) 요청정보 인코딩 : ");
      out.print( request.getCharacterEncoding() );
      out.write("<br>\r\n");
      out.write("\t\t4) 요청정보 컨텐츠타입 : ");
      out.print( request.getContentType() );
      out.write("<br>\r\n");
      out.write("\t\t5) 요청정보 프로토콜 : ");
      out.print( request.getProtocol() );
      out.write("<br>\r\n");
      out.write("\t\t6) 요청정보 전송방식 : ");
      out.print( request.getMethod() );
      out.write("<br>\r\n");
      out.write("\t\t7) 요청 URL : ");
      out.print( request.getRequestURL() );
      out.write("<br>\r\n");
      out.write("\t\t8) 컨텍스트 경로 : ");
      out.print( request.getContextPath() );
      out.write("<br>\r\n");
      out.write("\t\t9) 서버 이름 : ");
      out.print( request.getServerName() );
      out.write("<br>\r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!-- Request 객체의 헤더 정보 처리 -->\r\n");
      out.write("\t\t<h1>Request 헤더 관련 메서드</h1>\r\n");
      out.write("\t\t네트워크상에서 패킷 전달 시 헤더에 정보가 담겨서 전달된다. 이 헤더에는 웹 브라우저의 종류, 선호하는 언어 등을 담고 있다.\r\n");
      out.write("\t\t이러한 헤더 정보를 읽어올 수 있는 기능을 제공한다.<br>\r\n");
      out.write("\t\t해당 헤더값 구하기. ");
      out.print( request.getHeader("Accept-Language") );
      out.write(" \r\n");
      out.write("\t\t<hr>\r\n");
      out.write("\t\t<h1>클라이언트의 요청 파라미터 처리하기</h1>\r\n");
      out.write("\t\t<!--  \r\n");
      out.write("\t\t# Request 객체의 요청 파라미터 처리하기\r\n");
      out.write("\t\tgetParameter(name) : 이름이 name인 파라미터의 값을 구한다. 존재하지 않는 경우 null을 반환.\r\n");
      out.write("\t\tgetParameterValues(name) : 이름이 name인 모든 파라미터의 값을 배열로 구한다.\r\n");
      out.write("\t\tgetParameterNames() : 브라우저가 요청한 파라미터의 이름 목록을 구한다.\r\n");
      out.write("\t\tgetParameterMap() : 브라우저가 요청한 파라미터의 이름 목록을 구한다.\r\n");
      out.write("\t\t-->\r\n");
      out.write("\t\tanswer.jsp?question_pet=fish 이런식으로 파라미터가 넘어온다.<br>\r\n");
      out.write("\t\t<!-- question_pet은 input의 name속성, fish는 input의 value속성에 해당한다. -->\r\n");
      out.write("\t\t");
      out.print( request.getParameter("q_name") );
      out.write("님 환영합니다. ");
      out.print( pet_info );
      out.write("<br>\r\n");
      out.write("\t\t");
 String[] val = request.getParameterValues("q_pet"); 
			for(int i = 0; i < val.length; i++){
      out.write("\r\n");
      out.write("\t\t\t\t");
      out.print( val[i] + " " );
      out.write("\r\n");
      out.write("\t\t");
}
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
