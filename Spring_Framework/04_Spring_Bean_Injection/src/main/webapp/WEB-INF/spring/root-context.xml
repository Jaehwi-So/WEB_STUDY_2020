<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
		 
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- # root-context는 사용할 객체를 생성하는 영역. web.xml 다음으로 실행된다 -->
	<!-- 보통 DAO와 같은 싱글톤 패턴을 사용하는 객체를 이 영역에서 생성한다. 이 영역에서 생성된 객체들은 Application 스코프에 저장된다. -->
	
	<!-- # Spring bean : Spring에서 객체를 생성하는 태그 -->
	
	<!-- #SI(Setter Injection)-->
	<bean id = "p1" class = "vo.PersonVO">	<!-- == PersonVO p1 = new PersonVO(); 기본 생성자를 사용함-->
		<!-- # property : 파라미터를 요구하는 속성에 값을 넣음 
		property를 사용하여 setter로 접근하는 형식을 SI(Setter Injection)이라고 한다.-->
		<property name = "name" value = "park"></property>	<!-- == p1.setName("park"); -->
		<property name = "age" value = "30"></property>
		<property name = "tel" value = "010-9876-5432"></property>
	</bean>
	
	<!-- #CI(Constructor Injection)-->
	<bean id = "p2" class = "vo.PersonVO">
		<!-- # contructor-arg : 생성자를 통해 파라미터를 전달한다. 
		 생성자 순서대로 값을 넣어야 한다. index를 통해 순서를 변경할 수는 있지만 거의 사용하지 않는다.
		다음과 같은 형식을 CI(Constructor Injection)이라고 한다.-->
		<constructor-arg value ="jung"></constructor-arg>
		<constructor-arg value ="23"></constructor-arg>
		<constructor-arg value ="010-4557-5651"></constructor-arg>
	</bean>
	
	<!-- String nameBean = new String("hong"); -->
	<bean id = "nameBean" class = "java.lang.String">
		<constructor-arg value = "hong"></constructor-arg>
	</bean>
	
	<!-- Integer ageBean = new Integer(25); -->
	<bean id = "ageBean" class = "java.lang.Integer">
		<constructor-arg value = "25"></constructor-arg>
	</bean>
	
	<!-- String telBean = new String("010-5444-4555"); -->
	<bean id = "telBean" class = "java.lang.String">
		<constructor-arg value = "010-5444-4555"></constructor-arg>
	</bean>
	
</beans>

	
